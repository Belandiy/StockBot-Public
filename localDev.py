#—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
import csv
import logging
import os

import pandas as pd
from apscheduler.triggers.interval import IntervalTrigger
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    CallbackContext,
    filters,
)
from datetime import datetime, timedelta

from storage import active_trackings, unique_users

#—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
DEVELOPER_KEY = "111"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
DEVELOPERS_FILE = "developers.csv"

def is_developer(user_id: int) -> bool:
    try:
        with open(DEVELOPERS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader)
            developers = [int(row[1]) for row in reader]
            logging.info(f"Developers list: {developers}")  # –õ–æ–≥–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            return user_id in developers
    except Exception as e:
        logging.error(f"Developer check error: {e}")
        return False

async def dev_menu(update: Update, context: CallbackContext):
    q = update.callback_query
    await q.answer()

    if not is_developer(q.from_user.id):
        await q.edit_message_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    buttons = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", callback_data="dev_stats")],
        [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", callback_data="jobs_page_0")],
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", callback_data="dev_list")],
        [InlineKeyboardButton("üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="show_unique_users")],
        [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤", callback_data="dev_analyze")],
        [InlineKeyboardButton("üìú –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä—ã", callback_data="trackers_page_0")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]

    await q.edit_message_text(
        text="üíª –ú–µ–Ω—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def dev_stats(update: Update, context: CallbackContext):
    q = update.callback_query
    await q.answer()

    # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = await generate_usage_stats()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n"
        f"üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        f"- –ó–∞ –¥–µ–Ω—å: {stats['users_day']}\n"
        f"- –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['users_week']}\n"
        f"- –ó–∞ –º–µ—Å—è—Ü: {stats['users_month']}\n\n"

        f"üîî –¢—Ä–µ–∫–µ—Ä—ã:\n"
        f"- –†–µ–≥—É–ª—è—Ä–Ω—ã–µ: {stats['regular_trackers']}\n"
        f"- –ü–æ—Ä–æ–≥–æ–≤—ã–µ: {stats['threshold_trackers']}\n"
        f"- –¢–æ–ø —Ç–∏–∫–µ—Ä—ã: {', '.join(stats['top_tickers'])}\n\n"

        f"‚öô –ù–∞–≥—Ä—É–∑–∫–∞:\n"
        f"- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['avg_response_time']} —Å–µ–∫\n"
        f"- –í—ã–∑–æ–≤–æ–≤/—á–∞—Å: {stats['calls_per_hour']}"
    )

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dev_menu")]])

    await q.edit_message_text(text=msg, reply_markup=kb)


async def generate_usage_stats():
    now = datetime.now()
    stats = {
        'users_day': 0,
        'users_week': 0,
        'users_month': 0,
        'regular_trackers': 0,
        'threshold_trackers': 0,
        'top_tickers': [],
        'avg_response_time': 0.0,
        'calls_per_hour': 0
    }

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        with open('unique_users.csv', 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader)  # –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞

            for row in reader:
                reg_date = datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S")
                if (now - reg_date).days <= 1: stats['users_day'] += 1
                if (now - reg_date).days <= 7: stats['users_week'] += 1
                if (now - reg_date).days <= 30: stats['users_month'] += 1
    except FileNotFoundError:
        pass

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–∫–µ—Ä–æ–≤
    ticker_counts = {}
    for user_data in active_trackings.values():
        for ticker, settings in user_data.items():
            if 'regular' in settings: stats['regular_trackers'] += 1
            if 'threshold' in settings: stats['threshold_trackers'] += 1
            ticker_counts[ticker] = ticker_counts.get(ticker, 0) + 1

    stats['top_tickers'] = sorted(ticker_counts, key=lambda x: ticker_counts[x], reverse=True)[:5]

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏
    try:
        with open('function_logs.csv', 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader)  # –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞

            timestamps = []
            for row in reader:
                timestamps.append(datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S"))

            if timestamps:
                time_diff = (max(timestamps) - min(timestamps)).total_seconds()
                stats['avg_response_time'] = round(time_diff / len(timestamps), 2)
                stats['calls_per_hour'] = round(len(timestamps) / (time_diff / 3600) if time_diff > 0 else 0)
    except FileNotFoundError:
        pass

    return stats

async def show_developers(update: Update, context: CallbackContext):
    q = update.callback_query
    await q.answer()
    logging.info("--- START SHOW DEVELOPERS HANDLER ---")

    try:
        logging.info(f"Trying to open developers file: {os.path.abspath(DEVELOPERS_FILE)}")
        if not os.path.exists(DEVELOPERS_FILE):
            raise FileNotFoundError

        with open(DEVELOPERS_FILE, 'r', newline='', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            developers = list(reader)

            if not developers:
                msg = "üö´ –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—É—Å—Ç"
            else:
                msg = "üë®üíª –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:\n\n" + "\n".join(
                    [f"{i+1}. {row[0]} | ID: `{row[1]}` | @{row[2]}"
                     for i, row in enumerate(developers)]
                )

    except FileNotFoundError:
        msg = "‚ùå –§–∞–π–ª —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        logging.error("–§–∞–π–ª developers.csv –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    except Exception as e:
        msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞"
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_developers: {str(e)}")

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dev_menu")]
    ])

    try:
        await q.edit_message_text(
            text=msg,
            reply_markup=kb,
            parse_mode=None
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")


async def show_unique_users(update: Update, context: CallbackContext):
    q = update.callback_query
    await q.answer()

    try:
        with open('unique_users.csv', 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader)  # –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞

            users = []
            for row in reader:
                users.append(f"{row[0]} | ID: {row[1]} | @{row[2] or '–Ω–µ—Ç'}")

            if not users:
                msg = "üö´ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            else:
                msg = "üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n" + "\n".join(users[:50])  # –ü–µ—Ä–≤—ã–µ 50 –∑–∞–ø–∏—Å–µ–π

                if len(users) > 50:
                    msg += "\n\n...–∏ –µ—â–µ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π".format(len(users) - 50)

    except FileNotFoundError:
        msg = "‚ùå –§–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
        logging.error(f"Error in show_unique_users: {e}")

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dev_menu")]
    ])

    await q.edit_message_text(
        text=msg,
        reply_markup=kb,
        parse_mode="HTML"
    )

async def dev_analyze(update: Update, context: CallbackContext):
    q = update.callback_query
    await q.answer()

    try:
        df = pd.read_csv('function_logs.csv')
        analysis = df.groupby(['Function Type', 'Username']).size().to_string()
        msg = f"üìä –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n<pre>{analysis}</pre>"
    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dev_menu")]])
    await q.edit_message_text(text=msg, reply_markup=kb, parse_mode="HTML")

async def show_active_trackings(update: Update, context: CallbackContext):
    q = update.callback_query
    await q.answer()

    page = int(q.data.split("_")[-1])
    per_page = 30
    all_trackers = []

    try:
        with open("trackings.txt", "r") as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue

                parts = line.split("-")
                if len(parts) not in [4, 5]:
                    continue

                chat_id = parts[0]
                tracking_type = parts[1]
                ticker = parts[2]

                if tracking_type == "follow_stock":
                    threshold = parts[3]
                    interval = parts[4]
                    tracker_info = f"üë§ {chat_id} | {ticker} | –ü–æ—Ä–æ–≥: {threshold}% –∫–∞–∂–¥—ã–µ {interval} –º–∏–Ω"
                elif tracking_type == "set_stock":
                    interval = parts[3]
                    tracker_info = f"üë§ {chat_id} | {ticker} | –†–µ–≥—É–ª—è—Ä–Ω—ã–µ: –∫–∞–∂–¥—ã–µ {interval} –º–∏–Ω"
                else:
                    continue

                all_trackers.append(tracker_info)

    except FileNotFoundError:
        await q.edit_message_text("üì≠ –§–∞–π–ª —Å —Ç—Ä–µ–∫–µ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_pages = (len(all_trackers) // per_page) + 1
    start = page * per_page
    end = start + per_page
    current_page = all_trackers[start:end]

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    msg_header = f"üìú –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä—ã (—Å—Ç—Ä. {page + 1}/{total_pages}):\n\n"
    msg = msg_header + "\n".join(current_page) if current_page else "üö´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–∫–µ—Ä–æ–≤"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons = []
    if len(all_trackers) > per_page:
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"trackers_page_{page - 1}"))
        if end < len(all_trackers):
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"trackers_page_{page + 1}"))
        if nav_buttons:
            buttons.append(nav_buttons)

    buttons.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="dev_menu")])

    await q.edit_message_text(
        text=msg,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="HTML"
    )

async def show_jobs(update: Update, context: CallbackContext):
    q = update.callback_query
    await q.answer()

    page = int(q.data.split("_")[-1])
    per_page = 10
    jobs = []

    # –ß–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    with open("trackings.txt", "r") as f:
        active_trackings = {line.strip() for line in f if line.strip()}

    for job in context.application.job_queue.jobs():
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
        job_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
        if "send_price_" in job.name:
            job_type = "üìÖ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
        elif "follow" in job.name:
            job_type = "üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞"
        elif "cleanup_archive_job" in job.name:
            job_type = "üîÑ –§–æ–Ω–æ–≤—ã–π —Å–±–æ—Ä"

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        interval = "–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è"
        if job.job and isinstance(job.job.trigger, IntervalTrigger):
            interval_sec = job.job.trigger.interval.total_seconds()
            interval = f"{interval_sec} —Å–µ–∫"

        # –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if job.enabled else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

        jobs.append(
            f"{job_type}\n{job.name}\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} | –°—Ç–∞—Ç—É—Å: {status}"
        )

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_pages = (len(jobs) // per_page) + 1
    start = page * per_page
    end = start + per_page
    current_page = jobs[start:end]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = f"‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—Å—Ç—Ä. {page + 1}/{total_pages}):\n\n" + "\n\n".join(current_page)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    buttons = []
    for i, job in enumerate(context.application.job_queue.jobs()[start:end]):
        buttons.append([InlineKeyboardButton(
            f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {i + 1}",
            callback_data=f"job_action_{page}_{i}_{job.name}"
        )])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"jobs_page_{page - 1}"))
    if end < len(jobs):
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"jobs_page_{page + 1}"))
    if nav_buttons:
        buttons.append(nav_buttons)

    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dev_menu")])

    await q.edit_message_text(msg, reply_markup=InlineKeyboardMarkup(buttons))

async def handle_job_action(update: Update, context: CallbackContext):
    q = update.callback_query
    await q.answer()

    _, page, idx, job_name = q.data.split("_", 3)
    job = next((j for j in context.application.job_queue.jobs() if j.name == job_name), None)

    if not job:
        await q.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    buttons = [
        [InlineKeyboardButton("‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if job.enabled else "‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å",
                              callback_data=f"toggle_{job_name}")],
        [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"run_{job_name}")],
        [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data=f"jobs_page_{page}")]
    ]

    await q.edit_message_text(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–µ–π:\n{job.name}\n–°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if job.enabled else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def execute_job_action(update: Update, context: CallbackContext):
    q = update.callback_query
    await q.answer()

    action, job_name = q.data.split("_", 1)
    job = next((j for j in context.application.job_queue.jobs() if j.name == job_name), None)

    if not job:
        await q.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    if action == "toggle":
        job.enabled = not job.enabled
        status = "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞" if not job.enabled else "–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        await q.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ {status}")
    elif action == "run":
        job.run(context.application)
        await q.answer("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    await show_jobs(update, context)